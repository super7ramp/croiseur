# SPDX-FileCopyrightText: 2023 Antoine Belvire
# SPDX-License-Identifier: GPL-3.0-or-later

variables:
  GIT_SUBMODULE_STRATEGY: normal
  # Include only Crossword Composer submodule, LibreOffice dictionaries are not required for build
  GIT_SUBMODULE_PATHS: croiseur-solver/croiseur-solver-paulgb/crossword-composer

stages:
  - build
  - publish

##
# Builds croiseur on a Linux machine.
#
Build on Linux:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: ["**/src/**", "**.gradle", "sbom.toml", ".gitlab-ci.yml"] # Build only if code/build scripts have changed
  # Use a tailored image derived from a minimal openSUSE Tumbleweed image, built via the openSUSE Build Platform.
  # See https://build.opensuse.org/package/show/home:1Antoine1:croiseur:head/croiseur-build-platform.
  image: registry.opensuse.org/home/1antoine1/croiseur/head/tumbleweed_containers/opensuse/croiseur-build-platform:19.2
  stage: build
  before_script:
    # Choose wisely cargo and gradle homes so that they can easily be cached later
    - export CARGO_HOME="$(pwd)/.cargo"
    - export GRADLE_USER_HOME="$(pwd)/.gradle"
  script:
    - reuse lint
    - gradle --parallel --build-cache assemble -x distZip
    - gradle --parallel --build-cache check
  variables:
    # Use master cache for first build on branch
    CACHE_FALLBACK_KEY: master-cache-linux
  cache:
    key: "${CI_COMMIT_REF_NAME}-linux"
    paths:
      # Gradle caches
      - .gradle
      # Cargo caches
      - "**/target"
      - .cargo
  artifacts:
    reports:
      junit: "**/TEST-*.xml"

##
# Builds croiseur on a Windows machine.
# Quite slow, only use for merge requests.
#
Build on Windows:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: ["**/src/**", "**.gradle", "sbom.toml", ".gitlab-ci.yml"] # Build only if code/build scripts have changed
  stage: build
  tags: [ windows ]
  before_script:
    # To be eventually extracted to build a dedicated image, too many limitations on Gitlab side for now
    - choco install -y oracle17jdk
    - choco install -y gradle
    - choco install -y rust
    - refreshenv
    # Use sparse protocol for faster crate index construction
    - $env:CARGO_REGISTRIES_CRATES_IO_PROTOCOL="sparse"
    # Choose wisely cargo and gradle homes so that they can easily be cached later
    - $env:CARGO_HOME=(Get-Location).Path + "\.cargo"
    - $env:GRADLE_USER_HOME=(Get-Location).Path + "\.gradle"
  script:
    - gradle --parallel --build-cache assemble -x distZip
    - gradle --parallel --build-cache check
    # Gradle daemon seems to prevent the script to be considered as terminated on Windows, shut it down
    - gradle --stop
  cache:
    key: "${CI_COMMIT_REF_NAME}-windows"
    paths:
      # Gradle caches
      - .gradle
      # Cargo caches
      - "**/target"
      - .cargo
  artifacts:
    reports:
      junit: "**/TEST-*.xml"

##
# Publishes a portable Linux distribution of croiseur.
# Slow, only run on master branch.
#
Publish Linux Distribution:
  rules: [ if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]
  stage: publish
  image: registry.opensuse.org/home/1antoine1/croiseur/head/tumbleweed_containers/opensuse/croiseur-build-platform:19.2
  before_script:
    - export CARGO_HOME="$(pwd)/.cargo"
    - export GRADLE_USER_HOME="$(pwd)/.gradle"
  script:
    - gradle --parallel --build-cache distZip
    - gradle --parallel --build-cache publish -Pcroiseur.maven.token.name="Job-Token" -Pcroiseur.maven.token.value="${CI_JOB_TOKEN}"
  cache:
    key: master-cache-linux
    paths:
      # Gradle caches
      - .gradle
      # Cargo caches
      - "**/target"
      - .cargo
  artifacts:
    paths:
      - "croiseur-cli/build/distributions/croiseur-cli*.zip"
      - "croiseur-gui/croiseur-gui/build/distributions/croiseur-gui*.zip"