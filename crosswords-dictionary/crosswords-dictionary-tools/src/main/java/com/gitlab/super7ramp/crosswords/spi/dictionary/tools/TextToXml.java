/*
 * SPDX-FileCopyrightText: 2023 Antoine Belvire
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

package com.gitlab.super7ramp.crosswords.spi.dictionary.tools;

import com.gitlab.super7ramp.crosswords.dictionary.common.StringFilters;
import com.gitlab.super7ramp.crosswords.dictionary.common.StringTransformers;
import com.gitlab.super7ramp.crosswords.dictionary.xml.codec.Dictionary;
import com.gitlab.super7ramp.crosswords.dictionary.xml.codec.DictionaryHeader;
import com.gitlab.super7ramp.crosswords.dictionary.xml.codec.DictionaryWriteException;
import com.gitlab.super7ramp.crosswords.dictionary.xml.codec.DictionaryWriter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Logger;
import java.util.stream.Stream;

/**
 * Text for XML dictionary format converter.
 */
public final class TextToXml {

    /** Logger. */
    private static final Logger LOGGER = Logger.getLogger(TextToXml.class.getName());

    /**
     * Entry point.
     *
     * @param args arguments
     */
    public static void main(final String[] args) {
        if (args.length < 2) {
            LOGGER.severe("Syntax: program_name in.txt out.xml");
            return;
        }

        final String output = args[1];
        final Path inputPath = Path.of(args[0]);
        final Locale locale = localeOf(inputPath);
        LOGGER.info("Locale is: " + locale.toLanguageTag());

        final DictionaryHeader header = new DictionaryHeader(locale, Map.of(Locale.ENGLISH,
                "Generated dictionary"), Map.of(Locale.ENGLISH, "Dictionary autogenerated from " +
                "text file"));

        try (final OutputStream fos = new FileOutputStream(output);
             final Stream<String> lines = Files.lines(inputPath)) {
            LOGGER.info("Reading lines...");
            // TODO make filtering optional
            final List<String> entries =
                    lines.filter(StringFilters.atLeastTwoCharacters())
                         .map(StringTransformers.toAcceptableCrosswordEntry())
                         .toList();
            LOGGER.info("Writing XML...");
            final Dictionary dictionary = new Dictionary(header, entries);
            DictionaryWriter.write(fos, dictionary);
            LOGGER.info("Wrote XML.");
        } catch (final IOException | DictionaryWriteException e) {
            LOGGER.severe(e.getMessage());
        }
    }

    private static Locale localeOf(final Path inputPath) {
        final String fileName = inputPath.getFileName().toString();
        return Locale.forLanguageTag(fileName.replace(".txt", "").replace("_", "-"));
    }

}
