#
# SPDX-FileCopyrightText: 2023 Antoine Belvire
# SPDX-License-Identifier: GPL-3.0-or-later
#
croiseur-cli.clue.get.provider=The clue provider to use
croiseur-cli.clue.get.usage.description=Get clues for the given words
croiseur-cli.clue.list-providers.usage.description=List available clue providers
croiseur-cli.clue.usage.description=Get crossword clues and list available clue providers
croiseur-cli.clue.usage.synopsisSubcommandLabel=COMMAND
croiseur-cli.dictionary.cat.PROVIDER\:DICTIONARY[0]=The identifier of the dictionary to display
croiseur-cli.dictionary.cat.usage.description=Display dictionary entries
croiseur-cli.dictionary.get-default.usage.description=Return the default dictionary
croiseur-cli.dictionary.grep.PATTERN[1]=The pattern to search
croiseur-cli.dictionary.grep.PROVIDER\:DICTIONARY[0]=The identifier of the dictionary to grep
croiseur-cli.dictionary.grep.usage.description=Display dictionary entries which match a given pattern
croiseur-cli.dictionary.list-providers.usage.description=List available dictionary providers
croiseur-cli.dictionary.list.locale=Filter on locale
croiseur-cli.dictionary.list.provider=Filter on provider
croiseur-cli.dictionary.list.usage.description=List available dictionaries
croiseur-cli.dictionary.usage.description=List and print available dictionaries
croiseur-cli.dictionary.usage.synopsisSubcommandLabel=COMMAND
croiseur-cli.help.usage.header=Display help information about the specified command
croiseur-cli.puzzle.cat.ID[0]=Puzzle identifier
croiseur-cli.puzzle.cat.usage.description=Display saved puzzle
croiseur-cli.puzzle.create.across-clue=An across clue. Example: "1,A clue.".
croiseur-cli.puzzle.create.author=Value of field 'Author'
croiseur-cli.puzzle.create.copyright=Value of field 'Copyright'
croiseur-cli.puzzle.create.date=Value of field 'Date' in 'YYYY-MM-DD'-format
croiseur-cli.puzzle.create.down-clue=A down clue. Example: "1,A clue.".
croiseur-cli.puzzle.create.editor=Value of field 'Editor'
croiseur-cli.puzzle.create.rows=Grid rows, separated by ',', with '.' representing an empty \
  box and '#' a shaded box. Example : 'A.C,D#F'
croiseur-cli.puzzle.create.title=Value of field 'Title'
croiseur-cli.puzzle.create.usage.description=Save a new puzzle
croiseur-cli.puzzle.delete-all.usage.description=Delete all saved puzzles
croiseur-cli.puzzle.delete.ID[0]=Puzzle identifier
croiseur-cli.puzzle.delete.usage.description=Delete a saved puzzle
croiseur-cli.puzzle.export.FILE[0]=File to export
croiseur-cli.puzzle.export.format=Output puzzle format under the form "*.extension" (e.g "*.xd")
croiseur-cli.puzzle.export.usage.description=Export a puzzle to a file
croiseur-cli.puzzle.import.FILE[0]=File to import
croiseur-cli.puzzle.import.format=Input puzzle format under the form "*.extension" (e.g "*.xd")
croiseur-cli.puzzle.import.usage.description=Import a puzzle from a file
croiseur-cli.puzzle.list-decoders.usage.description=List puzzle decoders
croiseur-cli.puzzle.list-encoders.usage.description=List puzzle encoders
croiseur-cli.puzzle.list.usage.description=List saved puzzles
croiseur-cli.puzzle.update.ID[0]=Puzzle identifier
croiseur-cli.puzzle.update.across-clue=A new across clue. Example: "1,A clue.".
croiseur-cli.puzzle.update.author=New value of field 'Author'
croiseur-cli.puzzle.update.copyright=New value of field 'Copyright'
croiseur-cli.puzzle.update.date=New value of field 'Date' in 'YYYY-MM-DD'-format
croiseur-cli.puzzle.update.down-clue=A new down clue. Example: "1,A clue.".
croiseur-cli.puzzle.update.editor=New value of field 'Editor'
croiseur-cli.puzzle.update.rows=New grid rows, separated by ',', with '.' representing an empty \
  box and '#' a shaded box. Example : 'A.C,D#F'
croiseur-cli.puzzle.update.title=New value of field 'Title'
croiseur-cli.puzzle.update.usage.description=Update a saved puzzle
croiseur-cli.puzzle.usage.synopsisSubcommandLabel=COMMAND
croiseur-cli.puzzle.usage.description=Manage saved puzzles
croiseur-cli.solver.list.usage.description=List available solvers
croiseur-cli.solver.run.SOLVER[0]=The name of the solver to use
croiseur-cli.solver.run.boxes=Pre-filled boxes e.g. '--boxes ((1,2),A) ((3,4),B)...'
croiseur-cli.solver.run.clues=Generate clues if solver finds a solution
croiseur-cli.solver.run.dictionary=Dictionary identifiers
croiseur-cli.solver.run.horizontal=Pre-filled horizontal slots, e.g. '--horizontal ((0,0),\
  hello) ((5,0),world)...'
croiseur-cli.solver.run.progress=Show solver progress
croiseur-cli.solver.run.random=Shuffle the dictionaries before solving
croiseur-cli.solver.run.save=Save the grid. Grid will be saved before solving. Grid will then be \
  saved after solving, if solving is successful.
croiseur-cli.solver.run.shaded-boxes=Shaded boxes, e.g. '--shaded-boxes (1,2) (3,4)...'
croiseur-cli.solver.run.size=Grid dimensions, e.g. '--size 7x15' for a grid of width 7 and \
  height 15
croiseur-cli.solver.run.usage.description=Solve a crossword puzzle
croiseur-cli.solver.run.vertical=Pre-filled vertical slots, e.g. '--vertical ((0,0),hello) ((5,\
  0),world)...'
croiseur-cli.solver.usage.description=Solve crosswords and list available solvers
croiseur-cli.solver.run.usage.footer=\n\
  Example:\n\
  \n\
  The following command asks Croiseur to solve a grid of 6 columns and 7 rows, with blocks and \
  pre-filled boxes.\n\
  \n\
  \t\tcroiseur-cli solver run \\\n\
  \t\t--size 6x7  \\\n\
  \t\t--shaded-boxes '(1,1)' '(2,2)' '(3,5')' '(5,4)' \\\n\
  \t\t--down '((1,2),cross)' \\\n\
  \t\t--across '((0,4),words)' \\\n\
  \n\
  Note that the index of the boxes starts at 0 and not at 1. Also note that the command does not \
  define a particular solver or a dictionary: Therefore Croiseur will select them for you.\n\
  \n\
  The command command quickly produces a result such as the one below:\n\
  \n\
  \tResult: SUCCESS\n\
  \n\
  \t|C|R|O|S|S|S|\n\
  \t|A|#|M|I|T|O|\n\
  \t|T|C|#|D|E|W|\n\
  \t|A|R|D|E|N|S|\n\
  \t|W|O|R|D|S|#|\n\
  \t|B|S|A|#|O|T|\n\
  \t|A|S|T|O|N|S|\n\
  \n\
  Numerous options exist, notably --random which allows to produce a different result for each \
  invocation. Don't hesitate to explore them!
croiseur-cli.solver.usage.synopsisSubcommandLabel=COMMAND
croiseur-cli.usage.footer=\n\
  First time with Croiseur? Try this out:\n\
  \n\
  \tcroiseur-cli solver run --size 4x4\n\
  \n\
  This command will generate your first square grid! Next step: Discover the options and the \
  examples of the 'solver run' subcommand with:\n\
  \n\
  \tcroiseur solver run --help
croiseur-cli.usage.synopsisSubcommandLabel=COMMAND
presenter.clue.name=Name
presenter.clue.description=Description
presenter.clue.clue-format=%s: %s%n
presenter.dictionary.description=Description
presenter.dictionary.locale=Locale
presenter.dictionary.name=Name
# Translators: Arguments are dictionary name, locale and provider
presenter.dictionary.preferred.format=%s, %s, provided by %s%n
presenter.dictionary.provider=Provider
# Translators: Short name for "Identifier"
presenter.puzzle.id=Id
presenter.puzzle.identifier=Identifier
# Translators: Short name for "Revision"
presenter.puzzle.rev=Rev
presenter.puzzle.revision=Revision
presenter.puzzle.title=Title
presenter.puzzle.author=Author
presenter.puzzle.clues.across=Across
presenter.puzzle.clues.down=Down
presenter.puzzle.codec.name=Name
presenter.puzzle.codec.description=Description
presenter.puzzle.codec.formats=Supported formats
presenter.puzzle.deleted.all=Deleted all puzzles.
# Translators: Argument is the puzzle identifier (a long integer value).
presenter.puzzle.deleted.single=Deleted puzzle #%d.%n
presenter.puzzle.editor=Editor
presenter.puzzle.copyright=Copyright
presenter.puzzle.date=Date
presenter.puzzle.grid=Grid
presenter.puzzle.list.decoders.none-found=No puzzle decoder found.
presenter.puzzle.list.encoders.none-found=No puzzle encoder found.
presenter.puzzle.list.none-found=No saved puzzle.
presenter.puzzle.save.success=Saved puzzle.
presenter.solver.description=Description
presenter.solver.name=Name
# Translators: The completion displayed when --progress is on; First
#  argument is current progress, second is best progress
presenter.solver.progress.format=Completion: %3d %% [best: %3d %%]
presenter.solver.provider=Provider
presenter.solver.result.header=Result: 
presenter.solver.result.impossible=IMPOSSIBLE
presenter.solver.result.success=SUCCESS
presenter.solver.state.initialized=Solver initialized
presenter.solver.state.initializing=Initializing solver
usage.commandListHeading=%nCommands:%n
usage.synopsisHeading=Usage:\u0020